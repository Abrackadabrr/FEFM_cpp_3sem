#include <iostream>

struct MyChar {
	int c;

	MyChar(int c_) {
		c = c_;
		std::cout << "Ctor" << std::endl;
	};

	~MyChar() {
		std::cout << "Dtor" << std::endl;
	}
};

// new знает тип, знает сколько памяти нужно выделить (ровно на один объект)
// new [n] --- аналогично, но памяти на n объектов
//
// delete знает сколько нужно удалить (один объек конкретного типа)
// delete [] тоже знает сколько нужно удалить!
//
// На самом деле new [] перед блоком с вашими данными выделяет немного 
// доп памяти, в которой содержится информация о том, сколько нужно освободить
// при вызове delete[]. Поэтому перепутать delete и delete[] может быть очень
// и очень опасно

int main() {
	MyChar * char_p1 = new MyChar{40};
	MyChar * char_p2 = new MyChar{5};

	delete char_p1; // вызовется один деструктор, так как delete знает
			// сколько нужно освободить 
			// (память ровно под один объект)

	// delete char_p2; <-- должно быть так
	delete [] char_p2;  // но мы написали случайно так
			    // delete[] прочитает то, что не должен читать
}
