template<typename T>
class subvector {
     int *mas;
     unsigned int top;
     unsigned int capacity;
     
public:
     bool push_back(const T& d); // добавление элемента в конец недовектора с выделением дополнительной памяти при необходимости
     T pop_back(); // удаление элемента с конца недовектора, значение удаленного элемента вернуть (если недовектор пустой, вернуть T{})
     bool resize( unsigned int new_capacity); // увеличить емкость недовектора 
     // (можно использовать и для уменьшения - тогда, в рамках данной реализации, 
     // если top меньше новой capacity, то копируем только то, что влезает, и уменьшаем top до capacity)
     void shrink_to_fit(); // очистить неиспользуемую память, переехав на новое место с уменьшением capacity до top
     void clear(); // очистить содержимое недовектора, занимаемое место при этом не меняется
};




