// Стоит задача написать функции сравнения для переменных нескольких типов данных
// Для решения этой задачи мы пользумемся механизмом перегрузки и с 
// радостью пишем по одной функции на каждый тип данных

int max(int lhs, int rhs) {
    return lhs < rhs ? rhs : lhs;
};

float max(float lhs, float rhs) {
    return lhs < rhs ? rhs : lhs;
};


double max(double lhs, double rhs) {
    return lhs < rhs ? rhs : lhs;
};

// Давайте посмотрим на это как на синтаксические выражение.
// Единственное различие в них -- это названия типов

// Можно решить эту проблему через void pointer, например, так

// comparator -- указатель на функцию, принимающую два const void pointer'a и размер объекта в байтах
void * max(const void * p1, const void * p2, int n, 
        int(*comparator)(const void *, const void *, int n) // Вот он раш компаратор
        ) {
    comparator(p1, p2, n) == 1 ? p1 : p2;
}

// Нагородили какой-то лес непонятный, хотя мы всего лишь хотим сделать так, 
// чтобы можно было "на секундочку отказаться" от жесткой типизации
// Давайте заставим компилятор писать типы за нас