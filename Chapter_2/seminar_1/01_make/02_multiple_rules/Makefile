# Давайте разделим Makefile на несколько связанных целей
# 
# При наличии более одной цели внутри скрипта make выбирает главной целью (той, 
# что он будет исполнять) первую попавшуюся.
# Все остальные цели проигнорируются, если они не связаны с первой никаким образом 
#
# Здесь мы собираем многофайловый проект, как если бы собирали его руками: команды одни и те же


general_kenobi: main.o general.o kenobi.o
	g++ main.o general.o kenobi.o -o general_kenobi

main.o: print main.cpp general.hpp kenobi.hpp
	g++ main.cpp -c -o main.o

general.o: general.cpp general.hpp
	g++ general.cpp -c -o general.o

kenobi.o: kenobi.cpp kenobi.hpp
	g++ kenobi.cpp -c -o kenobi.o

print: 
	echo ${HOME}

# Главной целью здесь станет general_kenobi, потому что она первая
# Да её исполнения нужны файлы main.o, general.o и kenobi.o, 
# а значит, что нужно выполнить правила, которые эти файлы генерируют.
# И так далее будет происходить рекурсивное исполнение всех правил
# 
# И тут важно понять, что на самом деле, пререквизиты -- это не толькой файлы, которые нужны для
# выполнения команд в правиле, но и ещё "названия" других правил, которые тоже нужно выполнить перед исполнением
# текущих. Так что на самом деле main.o general.o kenobi.o -- это "названия правил", а не названия файлов.
# Здесь и необходио удобство в том, что цель и есть название генерирующегося файла. 
#
# На примере print показывается, что цель может и по-другому назваться, а так же то, что 
# если цель не используется нигде и не является первой, то она будет проигнорирована 
