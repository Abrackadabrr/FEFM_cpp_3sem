# Укажем версию cmake, необходимую для корректного запуска текущего кода

cmake_minimum_required(VERSION 3.16)

# Название проекта -- устанавливает системную переменную PROJECT_NAME

project(myProject)

# Как уже ясно: есть системные переменные
# Системные переменные определены изначально, либо определяются с помощью команд, 
# как например project()
# Чтобы дописать что-то в системную переменную нужно сделать что-то типа "x = x + 1" 
# Происходит это с помощью команды set()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Wall")
set(CMAKE_BUILD_TYPE Debug)

# Помимо обычного присвоения переменных существует ещё рекурсивное 
# задание на основе регулярного выражения
# Ключевое слово file -- это команда, используемая для работы с файловой системой
# Полный вызов команды выглядит так

# file(GLOB_RECURSE <variable> [FOLLOW_SYMLINKS] [LIST_DIRECTORIES true|false] 
# [RELATIVE <path>] [CONFIGURE_DEPENDS] <globbing-expressions>...)

# Что-то подобное вы увидите в любой документации к Cmake
# Необязательные вещи прописывабтся в [] и представляют собой дополнительные флаги

# Самый простой вариант
file(GLOB_RECURSE SOURCES src/*.cpp)

message(${SOURCES})

# ТЕРМИНОЛОГИЯ 
# Target -- цель, которую необходимо собрать (исполняемый файл, библиотека). 
# Целей может быть несколько, и в отличие от make цель не является названием набора команд, а есть непосредственно объект.
# Target устанавливается либо командой add_executable(), либо add_library()

add_executable(${PROJECT_NAME} ${SOURCES})

# Здесь мы сказали "сделать исполняемый файл с названием проекта, 
# при этом используй исходники, которые мы определили в переменной SOURCES"
