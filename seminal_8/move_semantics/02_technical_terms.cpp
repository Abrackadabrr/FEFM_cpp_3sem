// Для того, чтобы понимать, что явялется временным объектом, а что нет, нам нужна какая-то новая синтаксическая конструкция
// Мы знаем, что const T & связывается со временными объектами, но в сущности мы тогда не сможем ничего менять в такои временном объекте

// Терминология
// lvalue (location value)
// Это то, у чего есть локация в памяти, на что вы можете взять указатель, то что имеет имя (даже ссылку)

// rvalue
// Это то, у чего имени нет, то что не лежит в памяти и является временным объектом.

// В предыдущем примере
// v1, v2 -- это lvalue,  потому что они лежат в памяти и имеют имена
// foo() -- это rvalue, потому что являются временными объектами

int foo() {
    return 1;
}

int main() {
    int a = 1;  // a -- lvalue
    int &b = a; // b -- это lvalue
    const int& c = 1;  // c -- это lvalue

    a + 1;  // все ниже -- это rvalue, так как является выражением, а значит и временным объектом
    1 + 1;
    a + a;
    foo(); 

    // если говорить чуть проще, то нам нужно отличить результат выражения от переменной, которая уже лежит в памяти 
    // на помощь приходя rvalue ссылки
}
